---
title: "30538 Problem Set 4: Spatial"
format: 
  pdf:
    keep-tex: true
    include-in-header: 
       text: |
         \usepackage{fvextra}
         \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
include-before-body:
  text: |
    \RecustomVerbatimEnvironment{verbatim}{Verbatim}{
      showspaces = false,
      showtabs = false,
      breaksymbolleft={},
      breaklines
    }
---

**PS4:** Due Sat Nov 2 at 5:00PM Central. Worth 100 points. 

## Style Points (10 pts)
Please refer to the minilesson on code style here.

## Submission Steps (10 pts)
1. This problem set is a paired problem set.
2. Play paper, scissors, rock to determine who goes first. Call that person Partner 1.
• Partner 1 (name and cnet ID): Wei Chen (Ashley) Liu, wliu10
• Partner 2 (name and cnet ID): Ruiyi Wu, ruiyi
3. Partner 1 will accept the ps4 and then share the link it creates with their partner. You can only share it with one partner so you will not be able to change it after your partner has accepted.
4. “This submission is our work alone and complies with the 30538 integrity policy.” Add your initials to indicate your agreement: **_AL_**  **_RW_**
5. “I have uploaded the names of anyone else other than my partner and I worked with on the problem set here” (1 point)
6. Late coins used this pset: **_1_** Late coins left after submission: **_3_**
7. Knit your ps4.qmd to an PDF file to make ps4.pdf,
• The PDF should not be more than 25 pages. Use head() and re-size figures when appropriate.
8. (Partner 1): push ps4.qmd and ps4.pdf to your github repo.
9. (Partner 1): submit ps4.pdf via Gradescope. Add your partner on Gradescope.
10. (Partner 1): tag your submission in Gradescope

```{python}
#| echo: false
import warnings 
warnings.filterwarnings("ignore")
```

## Download and explore the Provider of Services (POS) file (10 pts)

1. Use this definition to create a list of all hospitals that were active in 2016 that were suspected to have closed by 2019. Record the facility name and zip of each hospital as well as the year of suspected closure (when they become terminated or disappear from the data). How many hospitals are there that fit this definition?
```{python}
pos2018 = pos2018.rename(columns={'ï»¿PRVDR_CTGRY_SBTYP_CD': 'PRVDR_CTGRY_SBTYP_CD'})
pos2019 = pos2019.rename(columns={'ï»¿PRVDR_CTGRY_SBTYP_CD': 'PRVDR_CTGRY_SBTYP_CD'})
pos2016["year"] = 2016
pos2017["year"] = 2017
pos2018["year"] = 2018
pos2019["year"] = 2019
all_years = pd.concat([pos2016, pos2017, pos2018, pos2019], ignore_index=True)
all_years_filtered = all_years[(all_years['PRVDR_CTGRY_SBTYP_CD'] == 1) & (all_years['PRVDR_CTGRY_CD'] == 1)]
df_2017_2019 = pd.concat([pos2017, pos2018, pos2019], ignore_index=True)
df_2017_2019_filtered = df_2017_2019[(df_2017_2019['PRVDR_CTGRY_SBTYP_CD'] == 1) & (df_2017_2019['PRVDR_CTGRY_CD'] == 1)]
```
```{python}
active_2016 = st_hospitals2016[st_hospitals2016["PGM_TRMNTN_CD"] == 0]
non_active_2017_2019 = df_2017_2019_filtered[df_2017_2019_filtered["PGM_TRMNTN_CD"] != 0]

merged_hospitals = active_2016.merge(
    non_active_2017_2019[["PRVDR_NUM", "PGM_TRMNTN_CD", "year"]],
    on="PRVDR_NUM",
    how="left",
    indicator=True
)

merged_hospitals["Closure_Year"] = merged_hospitals["year_y"]

closed_hospitals = merged_hospitals[merged_hospitals["_merge"] == "both"]

disappeared_hospitals = active_2016[~active_2016["PRVDR_NUM"].isin(df_2017_2019_filtered["PRVDR_NUM"])]
disappeared_hospitals = disappeared_hospitals.assign(Closure_Year=2017)

all_closed_hospitals = pd.concat([closed_hospitals, disappeared_hospitals], ignore_index=True)

all_closed_hospitals.sort_values(by=["PRVDR_NUM", "Closure_Year"], ascending=[False, True], inplace=True)

final_closed_hospitals = all_closed_hospitals.groupby("PRVDR_NUM").aggregate(
    FAC_NAME=("FAC_NAME", "first"),
    ZIP_CD=("ZIP_CD", "first"),
    Closure_Year=("Closure_Year", "first")
).reset_index()

final_closed_hospitals["ZIP_CD"] = final_closed_hospitals["ZIP_CD"].astype(int)
final_closed_hospitals["Closure_Year"] = final_closed_hospitals["Closure_Year"].astype(int)

num_closed_hospitals = final_closed_hospitals.shape[0]
print(num_closed_hospitals)
```

There are 174 hospitals that fit this definition.

2. Sort this list of hospitals by name and report the names and year of suspected closure for the first 10 rows.
```{python}
sorted_hospitals = final_closed_hospitals.sort_values(by="FAC_NAME")

first_10_hospitals = sorted_hospitals[['FAC_NAME', 'Closure_Year']].head(10)
print("First 10 hospitals sorted by name with suspected closure year:")
print(first_10_hospitals)
```

3. However, not all suspected hospital closures are true closures. For example, in the case of a merger, a CMS certification number will be appear to be “terminated,” but then the hospital re-appear under a similar name/address with a new CMS certification number in the next year. As a first pass to address this, remove any suspected hospital closures that are in zip codes where the number of active hospitals does not decrease in the year after the suspected closure.
    a. Among the suspected closures, how many hospitals fit this definition of potentially being a merger/acquisition? After correcting for this, how many hospitals do you have left
```{python}
hospitals_per_zip_year = all_years_filtered.groupby(["ZIP_CD", "year"]).size().reset_index(name="Active_Hospitals")

closure_analysis = final_closed_hospitals.merge(
    hospitals_per_zip_year,
    left_on=["ZIP_CD", "Closure_Year"],
    right_on=["ZIP_CD", "year"],
    how="left"
)

closure_analysis["Following_Year"] = closure_analysis["Closure_Year"] + 1

closure_analysis = closure_analysis.merge(
    hospitals_per_zip_year,
    left_on=["ZIP_CD", "Following_Year"],
    right_on=["ZIP_CD", "year"],
    how="left",
    suffixes=('', '_NextYr')
)

closure_analysis["Merger_Possible"] = (
    closure_analysis["Active_Hospitals_NextYr"] >= closure_analysis["Active_Hospitals"]
)

corrected_closed_hospitals = closure_analysis[~closure_analysis["Merger_Possible"]]

merger_suspects_count = closure_analysis["Merger_Possible"].sum()

remaining_hospitals_count = corrected_closed_hospitals.shape[0]

print("Potential mergers/acquisitions:", merger_suspects_count)
print("Hospitals remaining after correction:", remaining_hospitals_count)
```

96 hospitals fit this definition of potentially being a merger/acquisition.
After correcting for this, 78 hospitals have left.

b. Sort this list of corrected hospital closures by name and report the first 10 rows.

```{python}
sorted_closures = corrected_closed_hospitals.sort_values(by="FAC_NAME").head(10)
sorted_closures
```

## Download Census zip code shapefile (10 pt) 

1. This is non-tabular data. What are the five file types? What type of information is in each file? It will be useful going forward to have a sense going forward of which files are big versus small. After unzipping, how big is each of the datasets?
    a.
The types of the five files are .xml, .shx, .shp, .prj, and .dbf, which refer to Metadata File (.xml), Shape Index File (.shx), Shapefile (.shp), Projection File (.prj), and Database File (.dbf). Metadata File contains metadata about the dataset, such as author, creation date, description, and licensing information, providing context and documentation about the dataset’s contents and purpose. Shape Index File is an index file that speeds up access to the geometry in the .shp file. It allows for quicker data retrieval, especially when dealing with large datasets, required alongside the .shp file to properly read and display spatial features. Shapefile is the core file that contains the geometry of the spatial features (e.g., points, lines, polygons). It stores the actual location data (coordinates) for each spatial feature required for reading spatial data in most GIS software. Projection File defines the coordinate system and projection information of the spatial data, allowing GIS software to interpret the spatial features correctly on a map and align it with other data in the same projection. Database File stores attribute data in a tabular format, linked to each feature in the .shp file. The .dbf file contains non-spatial information, like names, population counts, or other descriptive details associated with each spatial feature, required to complete the dataset with meaningful attribute information.

    b. 
```{python}
directory_path = "/Users/ashleyliu/Downloads/gz_2010_us_860_00_500k"
files = ["gz_2010_us_860_00_500k.xml", "gz_2010_us_860_00_500k.shx", "gz_2010_us_860_00_500k.shp", "gz_2010_us_860_00_500k.prj", "gz_2010_us_860_00_500k.dbf"]
for file in files:
    file_path = os.path.join(directory_path, file)
    file_size = os.path.getsize(file_path) / (1024 * 1024)
    print(f"{file}: {file_size:.2f} MB")
```

2. Load the zip code shapefile and restrict to Texas zip codes. (Hint: you can identify which state a zip code is in using the first 2-3 numbers in the zip code (Wikipedia link). Then calculate the number of hospitals per zip code in 2016 based on the cleaned POS file from the previous step. Plot a choropleth of the number of hospitals by zip code in Texas.

```{python}
import geopandas as gpd
zip_codes = gpd.read_file(os.path.join(directory_path, "gz_2010_us_860_00_500k.shp"))
zip_codes_tx = zip_codes[zip_codes["NAME"].str.startswith(("75", "76", "77", "78", "79", "885"))]
```

```{python}
st_hospitals2016["ZIP_CD"] = st_hospitals2016["ZIP_CD"].astype(int)
hospitals_per_zip_2016 = st_hospitals2016.groupby("ZIP_CD").size().reset_index(name = "hospital_count")
hospitals_per_zip_2016
```

```{python}
zip_codes_tx["NAME"] = zip_codes_tx["NAME"].astype(int)
hospitals_per_zip_2016["ZIP_CD"] = hospitals_per_zip_2016["ZIP_CD"].astype(int)
merged_data = zip_codes_tx.merge(hospitals_per_zip_2016, left_on = "NAME", right_on = "ZIP_CD", how = "left")
merged_data.plot(
    column = "hospital_count",  
    cmap = "Blues",         
    linewidth = 0.8,         
    edgecolor = "black",        
    legend = True             
)
```

## Calculate zip code’s distance to the nearest hospital (20 pts) (*)

1. Create a GeoDataFrame for the centroid of each zip code nationally: zips_all_centroids. What are the dimensions of the resulting GeoDataFrame? What do each of the columns mean?

```{python}
zip_codes["centroid"] = zip_codes.geometry.centroid
zips_all_centroids = zip_codes.set_geometry("centroid")
dimensions = zips_all_centroids.shape
print(f"Dimensions of the GeoDataFrame: {dimensions}")
```

GEO_ID: A unique geographic identifier assigned to each area by the Census Bureau. This ID is often useful for tracking and linking specific geographic areas in other datasets.

ZCTA5: Stands for ZIP Code Tabulation Area (ZCTA), which represents a generalized area based on the ZIP code. ZCTAs are created by the Census Bureau to approximate postal ZIP codes for mapping and demographic purposes, though they may not always match postal ZIP codes precisely.

NAME: Typically represents the name or label of the area, which, for ZCTAs, might be similar to the ZCTA5 value but in a different format.

LSAD: Likely stands for Legal/Statistical Area Description. This field usually indicates the type of geographic area or how it’s designated (e.g., city, county, ZIP code area).

CENSUSAREA: Indicates the land area of the ZCTA, likely in square miles or another unit of measurement. This is calculated by the Census Bureau and can help in geographic or demographic analyses.

geometry: This column contains the polygon geometry of each ZCTA, representing its full spatial shape or boundary. This is useful for mapping and for calculating spatial relationships.

centroid: The calculated geometric center of each ZCTA’s boundary. This is a single point that represents the "average" location within the boundary and will be helpful for calculating distances to nearby hospitals.

Each of these columns provides geographic or descriptive information about each ZIP code area (ZCTA) and could be useful depending on your specific analytical needs.

2. Create two GeoDataFrames as subsets of zips_all_centroids. First, create all zip codes in Texas: zips_texas_centroids. Then, create all zip codes in Texas or a bordering state: zips_texas_borderstates_centroids, using the zip code prefixes to make these subsets. How many unique zip codes are in each of these subsets? To do this, create a function that takes in two polygons and returns a boolean (true or false) if the polygons intersect. Combine all the zipcodes in texas into one polygon and then use this function to identify the bordering states.
```{python}
zips_texas_centroids = zips_all_centroids[zips_all_centroids["ZCTA5"].str.startswith(("75", "76", "77", "78", "79"))]
border_state_prefixes = ("70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "87", "88")
zips_texas_borderstates_centroids = zips_all_centroids[zips_all_centroids["ZCTA5"].str.startswith(border_state_prefixes)]
unique_texas_zipcodes = zips_texas_centroids["ZCTA5"].nunique()

unique_borderstates_zipcodes = zips_texas_borderstates_centroids["ZCTA5"].nunique()
unique_texas_zipcodes, unique_borderstates_zipcodes
```

3. Then create a subset of zips_texas_borderstates_centroids that contains only the zip codes with at least 1 hospital in 2016. Call the resulting Geo-DataFrame zips_withhospital_centroids What kind of merge did you decide to do, and what variable are you merging on?
```{python}
st_hospitals2016['ZIP_CD'] = st_hospitals2016['ZIP_CD'].astype(str).str.split('.').str[0].str.zfill(5)

zips_texas_borderstates_centroids = zips_texas_borderstates_centroids.copy()

zips_texas_borderstates_centroids['ZCTA5'] = zips_texas_borderstates_centroids['ZCTA5'].astype(str).str.zfill(5)
zips_texas_borderstates_centroids = zips_texas_borderstates_centroids.rename(columns={'ZCTA5': 'ZIP_CD'})

active_hospitals_2016 = st_hospitals2016[st_hospitals2016['PGM_TRMNTN_CD'] == 0][['ZIP_CD']].drop_duplicates()

zips_withhospital_centroids = zips_texas_borderstates_centroids.merge(
    active_hospitals_2016, on='ZIP_CD', how='inner'
)

print(zips_withhospital_centroids.head())
```

An inner merge on the `ZIP_CD` variable was used to match ZIP codes between `zips_texas_borderstates_centroids` and `st_hospitals2016`. This approach ensures `zips_withhospital_centroids` contains only ZIP code centroids in Texas and bordering states with at least one hospital in 2016. The `ZIP_CD` formatting was aligned for consistency across both datasets.

4. For each zip code in zips_texas_centroids, calculate the distance to the nearest zip code with at least one hospital in zips_withhospital_centroids.
    a. This is a computationally-intensive join. Before attempting to do the entire join, subset to 10 zip codes in zips_texas_centroids and try the join. How long did it take? Approximately how long do you estimate the entire procedure will take?
```{python}
import time
from shapely.ops import nearest_points

sample_zips_texas = zips_texas_centroids.sample(10, random_state=1)

start_time = time.time()

distances = []

for zip_code_geom in sample_zips_texas.geometry:
    nearest_geom = nearest_points(zip_code_geom, zips_withhospital_centroids.unary_union)[1]
    
    distance = zip_code_geom.distance(nearest_geom)
    distances.append(distance)

end_time = time.time()

sample_duration = end_time - start_time
print(f"Time taken for 10 zip codes: {sample_duration:.2f} seconds")

estimated_time_full = (sample_duration / 10) * len(zips_texas_centroids)
print(f"Estimated time for all zip codes: {estimated_time_full:.2f} seconds")
```

    b. Now try doing the full calculation and time how long it takes. How close is it to your estimation?
```{python}
start_time_full = time.time()

all_distances = []

for zip_code_geom in zips_texas_centroids.geometry:
    nearest_geom = nearest_points(zip_code_geom, zips_withhospital_centroids.unary_union)[1]
    
    distance = zip_code_geom.distance(nearest_geom)
    all_distances.append(distance)

end_time_full = time.time()

actual_duration_full = end_time_full - start_time_full
print(f"Actual time for the full dataset: {actual_duration_full:.2f} seconds")
```
The actual time of 0.75 seconds was much faster than the estimated 1.89 seconds, likely due to initial overhead in the sample skewing the estimate.

    c. Look into the .prj file and report which unit it is in. Convert the given unit to miles, using an appropriate conversion you find online (estimates are okay).
The actual runtime (0.06 seconds) was much faster than the estimated 2.48 seconds. It suggests that the join was less computationally intensive for the full dataset than expected. Small samples may not fully capture efficiencies that spatial indexing or bulk operations provide in larger datasets, leading to an overestimation in time.

5. Calculate the average distance to the nearest hospital for each zip code in Texas. What unit is this in? Report the average distance in miles. Does this value make sense? Map the value for each zip code.

    a. What unit is this in?
```{python}
from pyproj import CRS
file_path_prj = r"C:\Users\X1\Desktop\Github\fall2024\problem-set-4-ashley-ruiyi\gz_2010_us_860_00_500k\gz_2010_us_860_00_500k.prj"

with open(file_path_prj, 'r') as f:
    prj_wkt = f.read()

crs = CRS.from_wkt(prj_wkt)

print("WKT Projection:", crs.to_wkt())
```
Degrees.

    b. Report the average distance in miles. Does this value make sense?# Calculate the average distance in degrees
```{python}
average_distance_degrees = sum(all_distances) / len(all_distances)

#1 degree ≈ 69 miles
average_distance_miles = average_distance_degrees * 69

# Print the average distance in miles
print(f"Average distance to nearest hospital: {average_distance_miles:.2f} miles")
```
14.56 miles. An average distance of 14.56 miles to the nearest hospital for Texas zip codes seems reasonable, particularly for urban or suburban areas where hospitals are relatively accessible. However, this average might be influenced by the presence of densely populated regions with more hospitals close by, as well as some rural areas that may have larger distances to hospitals. It would be beneficial to consider the spread of distances or map the distribution to understand any outliers or variations better.

    c. Map the value for each zip code.
```{python}
zips_texas_centroids['Distance_to_Nearest_Hospital'] = [distance * 69 for distance in all_distances]

zips_texas_centroids['longitude'] = zips_texas_centroids.geometry.centroid.x
zips_texas_centroids['latitude'] = zips_texas_centroids.geometry.centroid.y

altair_data = zips_texas_centroids[['longitude', 'latitude', 'Distance_to_Nearest_Hospital']].copy()

alt_map = alt.Chart(altair_data).mark_circle(size=30).encode(
    longitude='longitude:Q',
    latitude='latitude:Q',
    color=alt.Color('Distance_to_Nearest_Hospital:Q', scale=alt.Scale(scheme='purples'), title='Distance to Nearest Hospital (miles)'),
    tooltip=['Distance_to_Nearest_Hospital:Q']
).properties(
    width=600,
    height=400,
    title='Average Distance to Nearest Hospital for Each Zip Code in Texas (miles)'
)

alt_map
```
    
## Effects of closures on access in Texas (15 pts)

1. Using the corrected hospital closures dataset from the first section, create a list of directly affected zip codes in Texas – that is, those with at least one closure in 2016-2019. Display a table of the number of zip codes vs. the number of closures they experienced.
可能要改成这个，你看看
```{python}
corrected_closed_hospitals["ZIP_CD"] = corrected_closed_hospitals["ZIP_CD"].astype(int)
merged_tx = zip_codes_tx.merge(corrected_closed_hospitals, left_on = "NAME", right_on = "ZIP_CD", how = "left")
merged_tx = merged_tx.dropna(subset=["ZIP_CD"])
closures_per_zip = merged_tx.groupby("NAME").size().reset_index(name = "closure_count")

zip_code_closure_summary = closures_per_zip.groupby("closure_count").size().reset_index(name = "zip_code_count")
zip_code_closure_summary
```
```{python}
result_4["ZIP_CD"] = result_4["ZIP_CD"].astype(int)
merged_tx = zip_codes_tx.merge(result_4, left_on = "NAME", right_on = "ZIP_CD", how = "left")
closures_per_zip = merged_tx.groupby("NAME").size().reset_index(name = "closure_count")
zip_code_closure_summary = closures_per_zip.groupby("closure_count").size().reset_index(name = "zip_code_count")
zip_code_closure_summary
```

2. Plot a choropleth of which Texas zip codes were directly affected by a closure in 2016-2019 – there was at least one closure within the zip code. How many directly affected zip codes are there in Texas?

```{python}
affected_zip_codes = closures_per_zip["NAME"].unique()
num_affected_zip_codes = len(affected_zip_codes)
print(f"Number of directly affected zip codes in Texas: {num_affected_zip_codes}")
```
```{python}
affected_zip_codes_df = zip_codes_tx[zip_codes_tx["NAME"].isin(affected_zip_codes)]
affected_zip_codes_df.plot(
    color = "red",           
    edgecolor = "black",     
    legend = True,
    figsize = (8, 8)
)
```

3. Then identify all the indirectly affected zip codes: Texas zip codes within a 10-mile radius of the directly affected zip codes. To do so, first create a GeoDataFrame of the directly affected zip codes. Then create a 10-mile buffer around them. Then, do a spatial join with the overall Texas zip code shapefile. How many indirectly affected zip codes are there in Texas?

```{python}
affected_zip_codes_gdf = gpd.GeoDataFrame(affected_zip_codes_df, geometry = "geometry")
affected_zip_codes_gdf.crs = "EPSG:4269" 
affected_zip_codes_gdf = affected_zip_codes_gdf.to_crs(epsg = 3857) 
```
```{python}
buffer_distance = 10 * 1609.34 
buffered = affected_zip_codes_gdf.buffer(buffer_distance)
buffered_gdf = gpd.GeoDataFrame(geometry = buffered)
buffered_gdf.crs = affected_zip_codes_gdf.crs
```
```{python}
indirectly_affected_zip_codes = gpd.sjoin(zip_codes_tx, buffered_gdf, how = "inner", predicate = "intersects")
num_indirectly_affected_zip_codes = indirectly_affected_zip_codes["NAME"].nunique()
print(f"Number of indirectly affected zip codes in Texas: {num_indirectly_affected_zip_codes}")
```

4. Make a choropleth plot of the Texas zip codes with a different color for each of the 3 categories: directly affected by a closure, within 10 miles of closure but not directly affected, or not affected.

```{python}
directly_affected = set(affected_zip_codes_gdf["NAME"])
indirectly_affected = set(indirectly_affected_zip_codes["NAME"])
def categorize_zip_code(row):
    if row["NAME"] in directly_affected:
        return "Directly Affected"
    elif row["NAME"] in indirectly_affected:
        return "Indirectly Affected"
    else:
        return "Not Affected"
zip_codes_tx["category"] = zip_codes_tx.apply(categorize_zip_code, axis = 1)
```

```{python}
import matplotlib.pyplot as plt
from matplotlib.patches import Patch
color_map = {
    "Directly Affected": "red",
    "Indirectly Affected": "orange",
    "Not Affected": "lightgray"
}
zip_codes_tx["color"] = zip_codes_tx["category"].map(color_map)
fig, ax = plt.subplots(1, 1, figsize = (8, 8))
zip_codes_tx.plot(color = zip_codes_tx["color"], edgecolor = "black", linewidth = 0.2, ax = ax)
legend_handles = [Patch(color = color, label = label) for label, color in color_map.items()]
ax.legend(handles = legend_handles, title = "Impact Category")
ax.set_title("Texas Zip Codes by Hospital Closure Impact (2016-2019)", fontsize = 16)
ax.set_axis_off()
plt.show()
```

## Reflecting on the exercise (10 pts) 

1. The “first-pass” method we’re using to address incorrectly identified closures in the data is imperfect. Can you think of some potential issues that could arise still and ways to do a better job at confirming hospital closures?

Potential Issues:
• Data Quality and Completeness:
Missing or Incomplete Data: Records may be missing important information, leading to incorrect conclusions about closures.
Inconsistent Data: Variations in naming conventions (e.g., "hospital" vs. "medical center") can lead to misidentification.
• Timing and Reporting Lag:
Delayed Reporting: Hospitals may close but not report the closure immediately, resulting in outdated information.
Temporary Closures: Some facilities might be temporarily closed for renovations or other reasons, which could be misclassified as permanent closures.
• Misclassification of Facility Types:
Ambiguous Categories: Facilities that change their service offerings (e.g., from inpatient to outpatient) might not be classified correctly, affecting closure data.
• Sampling Bias:
Over-reliance on a Single Data Source: Relying solely on one data source (e.g., administrative records) can lead to oversight of closures not reported in that dataset.

Improved Confirmation Methods:
• Cross-Referencing Multiple Data Sources:
Utilize Multiple Databases: Combine data from various sources, such as state health departments, federal databases (like Medicare), and local health agencies, to get a more comprehensive view of hospital closures.
Community Reports: Engage with local communities or news reports to gather anecdotal evidence of closures.
• Temporal Analysis:
Longitudinal Studies: Analyze trends over time to differentiate between permanent and temporary closures and understand the context of changes.
Regular Updates: Establish a regular update mechanism for closure data to account for recent changes.
• Standardization of Data:
Implement Consistent Naming Conventions: Develop standardized protocols for recording hospital data to reduce ambiguity and improve comparability.
Establish a Closure Definition: Clearly define what constitutes a closure (e.g., percentage of services discontinued) to create a consistent classification system.

2. Consider the way we are identifying zip codes affected by closures. How well does this reflect changes in zip-code-level access to hospitals? Can you think of some ways to improve this measure?
The current method of identifying zip codes affected by hospital closures may not fully capture changes in access, as it only reflects the presence or absence of hospitals. Access is also impacted by proximity to hospitals in neighboring zip codes, hospital capacity and services, population density, and demographics. Some zip codes may have good access to hospitals nearby, even if they lack one within their own boundaries. Additionally, closures of specialized or high-capacity facilities could have a greater impact. Including travel infrastructure and transportation availability would also better represent true accessibility. Factoring in these elements would create a more nuanced and accurate measure of changes in hospital access.
